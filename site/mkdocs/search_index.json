{
    "docs": [
        {
            "location": "/", 
            "text": "Bienvenue sur la documentation d'APICarto\n\n\nIntroduction\n\n\nAPICarto est un projet afin de favoriser et d'encourager l'utilisation de donn\u00e9es cartographques dans les d\u00e9marches de d\u00e9mat\u00e9rialisations administratives.\nLe projet est d\u00e9coup\u00e9 en diff\u00e9rents composants :\n\n\n\n\nDatastore, afin d'enregistrer les dessins d'un usager.\n\n\nZonage, un service d'interrogation de diff\u00e9rentes couches cartographiques\n\n\n\n\nNews\n\n\n11/08/2015\n\n\nOuverture du site de la documentation, la partie Datastore - enregistrement, cadastre et AOC.\n\n\nStatut du projet\n\n\nLe projet est actuellement support\u00e9 par le SGMAP et l'IGN.", 
            "title": "Home"
        }, 
        {
            "location": "/#bienvenue-sur-la-documentation-dapicarto", 
            "text": "", 
            "title": "Bienvenue sur la documentation d'APICarto"
        }, 
        {
            "location": "/#introduction", 
            "text": "APICarto est un projet afin de favoriser et d'encourager l'utilisation de donn\u00e9es cartographques dans les d\u00e9marches de d\u00e9mat\u00e9rialisations administratives.\nLe projet est d\u00e9coup\u00e9 en diff\u00e9rents composants :   Datastore, afin d'enregistrer les dessins d'un usager.  Zonage, un service d'interrogation de diff\u00e9rentes couches cartographiques", 
            "title": "Introduction"
        }, 
        {
            "location": "/#news", 
            "text": "11/08/2015  Ouverture du site de la documentation, la partie Datastore - enregistrement, cadastre et AOC.", 
            "title": "News"
        }, 
        {
            "location": "/#statut-du-projet", 
            "text": "Le projet est actuellement support\u00e9 par le SGMAP et l'IGN.", 
            "title": "Statut du projet"
        }, 
        {
            "location": "/datastore/enregistrement/", 
            "text": "Datastore - enregistrement d'un dessin\n\n\nIntroduction\n\n\nDans le but de faciliter l'int\u00e9gration de l'enregistrement de dessin fourni par un usager, un web service est mis en place afin de pouvoir enregistrer des g\u00e9om\u00e9tries au format GeoJson.\nCe service n\u00e9cessite une clef d'API \u00e0 demander au SGMAP.\n\n\nCe composant est sous licence AGPL v3 et disponible : https://github.com/blackrez/apicarto-datastore\n\n\nAPI (version beta)\n\n\nURL de d\u00e9v\u00e9loppement\n\n\nhttp://apicarto-dev.sgmap.fr/store/api/v2/datastore\n\n\nEnregistrement d'une g\u00e9om\u00e9trie.\n\n\nURL\n : http://apicarto-dev.sgmap.fr/store/api/v2/datastore/draw\n\n\nMethode\n : POST\n\n\nParam\n : geojson\n\n\nAuthenfication n\u00e9cessaire\n : oui\n\n\nR\u00e9ponse\n :\n\n\n\n\nCode HTTP\n :  200\n\n\nJSON\n : \n{reference : ID}\n\n\n\n\nLe param\u00e8tre geojson doit contenir un fichier GeoJson valide, il peut \u00eatre de n'importe quel type qui respecte la sp\u00e9cification. Dans les cas de g\u00e9om\u00e9tries multiples, il est recommand\u00e9 d'envoyer une collection de g\u00e9om\u00e9trie au lieu de faire fusionner les g\u00e9om\u00e9tries.\nLe champ \nproperties\n du GeoJson permet l'utilisation de n'importe quel champ.\n\n\nL'ID servira \u00e0 r\u00e9cup\u00e9rer la ou les g\u00e9om\u00e9tries.\n\n\nTout autre r\u00e9ponse doit \u00eatre consid\u00e9r\u00e9 comme une erreur et la g\u00e9om\u00e9trie n'est pas enregistr\u00e9e.\n\n\n\n\nExemple:\n\n\n$ curl -X POST -H \nAuthorization: Token 77def68e703a6bc65c0b9e4fa426306bc1f384d9\n -H \nCache-Control: no-cache\n -H -H \nContent-Type: application/x-www-form-urlencoded\n -d 'geojson=%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B4.839992523193359%2C43.95488856092349%5D%2C%5B4.8415374755859375%2C43.950316046754146%5D%2C%5B4.821968078613281%2C43.947597087764585%5D%2C%5B4.821624755859375%2C43.95167547960693%5D%2C%5B4.839992523193359%2C43.95488856092349%5D%5D%5D%7D%7D' 'http://apicarto-dev.sgmap.fr/store/store/api/v2/datastore/draw'\n\n{\nreference\n: \nOSHPPY2G\n}\n\n\n\n\nInt\u00e9gration avec leaflet et JQuery\n\n\nNB il est possible d'utiliser d'autres librairies comme OpenLayers, mais seul Leaflet est support\u00e9 officiellement\n\n\nAjout des librairies n\u00e9cessaires\n\n\nDans cet exemple, nous allons utiliser les plugins Leaflet.Draw (pour le dessin) et leaflet-geodesy (pour le calcul \u00e0 la vol\u00e9e de surface).\n\n\nlink rel=\nstylesheet\n type=\ntext/css\n href=\nhttp://leaflet.github.io/Leaflet.draw/leaflet.draw.css\n\n\nlink rel=\nstylesheet\n type=\ntext/css\n href=\nhttp://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css\n\n[...]\n\nscript src='https://api.tiles.mapbox.com/mapbox.js/plugins/leaflet-geodesy/v0.1.0/leaflet-geodesy.js'\n/script\n\n\nscript src=\nhttps://code.jquery.com/jquery-2.1.3.js\n/script\n\n\nscript src=\nhttp://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js\n/script\n\n\nscript src=\nhttp://leaflet.github.io/Leaflet.draw/leaflet.draw.js\n/script\n\n\n\n\n\nConfiguration de Leaflet et de Leaflet.draw\n\n\nApr\u00e8s une configuration classique de Leaflet.Draw (un exemple complet est visible ici : https://github.com/sgmap/apicarto-client/blob/master/examples/draw/demo.js )\n\n\nL'ensemble de ce premier block permet dde franciser Leaflet.Draw qui n'a pas de support multi-langues par d\u00e9faut.\n\n\nL.drawLocal.draw.toolbar.buttons.polygon = 'Dessiner un polygone';\nL.drawLocal.draw.toolbar.actions.title = \nAnnule le dessin en cours\n;\nL.drawLocal.draw.toolbar.actions.text = \nAnnuler\n;\nL.drawLocal.draw.toolbar.undo.text = \nSupprimer le dernier point\n;\nL.drawLocal.draw.toolbar.undo.title = \nSupprime le dernier point dessin\u00e9\n;\nL.drawLocal.draw.handlers.polygon.tooltip.start = \nCliquer pour commencer le dessin\n;\nL.drawLocal.draw.handlers.polygon.tooltip.cont = \nCliquer pour continuer le dessin\n;\nL.drawLocal.draw.handlers.polygon.tooltip.end = \nCliquer sur le premier point pour finaliser votre dessin\n;\nL.drawLocal.edit.toolbar.actions.save.title = \nValide les modifications\n;\nL.drawLocal.edit.toolbar.actions.save.text = \nValider les modifications\n;\nL.drawLocal.edit.toolbar.actions.cancel.title = \nAnnule les modifications\n;\nL.drawLocal.edit.toolbar.actions.cancel.text = \nAnnuler les modifications\n;\nL.drawLocal.edit.handlers.edit.tooltip.text = \nD\u00e9placer les points pour \u00e9diter le dessin\n;\nL.drawLocal.edit.handlers.edit.tooltip.subtext = \nCliquer sur 'annuler' pour annuler les changements\n;\nL.drawLocal.edit.toolbar.buttons.edit = \n\u00c9dition du dessin\n;\nL.drawLocal.edit.toolbar.buttons.editDisabled = \nAucun dessin \u00e0 \u00e9diter\n;\nL.drawLocal.edit.toolbar.buttons.removeDisabled = \nAucun dessin \u00e0 supprimer\n;\nL.drawLocal.edit.toolbar.buttons.remove = \nSupprimer le dessin\n;\nL.drawLocal.edit.handlers.remove.tooltip.text = \nCliquer sur le dessin pour le supprimer\n;\nL.drawLocal.edit.handlers.remove.tooltip.subtext = \nCliquer sur 'annuler' pour annuler la suppression\n;\n\n\n\n\nEnsuite on initialise Leaflet en ajoutant les couches n\u00e9cessaires.\n\n\nmapId = \nmap\n;\nlayers = new Array;\nwindow.mapcontrol = false;\nOSM = L.tileLayer(\nhttp://{s}.tile.osm.org/{z}/{x}/{y}.png\n, {\n  attribution: \ncopy; \na href=\\\nhttp://osm.org/copyright\\\nOpenStreetMap\n/a\n\n});\nscanWmtsUrl = 'http://apicarto-dev.sgmap.fr/maps' + '/wmts?SERVICE=WMTS\nREQUEST=GetTile\nVERSION=1.0.0\nLAYER=ORTHOIMAGERY.ORTHOPHOTOS\nSTYLE=normal\nTILEMATRIXSET=PM\nTILEMATRIX={z}\nTILEROW={y}\nTILECOL={x}\nFORMAT=image%2Fjpeg';\northo = L.tileLayer(scanWmtsUrl, {\n  attribution: \ncopy; \na href=\\\nhttp://www.ign.fr/\\\nIGN\n/a\n\n});\ncadWmtsUrl = 'http://apicarto-dev.sgmap.fr/maps' + '/wmts?SERVICE=WMTS\nREQUEST=GetTile\nVERSION=1.0.0\nLAYER=CADASTRALPARCELS.PARCELS\nSTYLE=bdparcellaire_b\nTILEMATRIXSET=PM\nTILEMATRIX={z}\nTILEROW={y}\nTILECOL={x}\nFORMAT=image%2Fpng\nTRANSPARENT=TRUE';\ncad = L.tileLayer(cadWmtsUrl, {\n  attribution: \ncopy; \na href=\\\nhttp://www.ign.fr/\\\nIGN\n/a\n,\n  transparent: true,\n  format: 'image/png'\n});\n\nmap = L.map(mapId, {\n  center: new L.LatLng(44.727006, -0.475243),\n  zoom: 13,\n  layers: [OSM]\n});\nwindow.map = map;\nbaseMap = {\n  \nIGN Orthophto\n: ortho,\n  \nOpenStreetMap\n: OSM\n};\noverlayMaps = {\n  \nIgn Cadastre\n: cad\n};\nL.control.layers(baseMap, overlayMaps).addTo(map);\n\n\n\n\nOn initialise Leaflet.draw, c'est ici qu'on configure le module de dessin.\n\n\nPour plus d'informations sur les callbacks et les options, se r\u00e9f\u00e9rer \u00e0 la documentation officielle du plugins https://github.com/Leaflet/Leaflet.draw.\n\n\ndrawnItems = new L.FeatureGroup();\nmap.addLayer(drawnItems);\ndrawControl = new L.Control.Draw({\n  position: \ntopright\n,\n  draw: {\n    polygon: {\n      shapeOptions: {\n        color: \npurple\n\n      },\n      allowIntersection: false,\n      drawError: {\n        color: \norange\n,\n        timeout: 1000\n      },\n      showArea: false,\n    },\n    marker: false,\n    polyline: false,\n    rectangle: false,\n    circle: false\n  },\n  edit: {\n    featureGroup: drawnItems\n  }\n});\nmap.addControl(drawControl);\nL.control.scale({\n  imperial: false\n}).addTo(map);\n\n\n\n\nOn ajoute plusieurs callbacks. Le but de chaque callback est de sauvegarder l'\u00e9tat du dessin dans une variable dans le navigateur de calculer la surface du dessin.\n\n\nmap.on(\ndraw:created\n, function(e) {\n  var layer;\n  drawnItems.clearLayers();\n  layer = e.layer;\n  drawnItems.addLayer(layer);\n  window.data = layer.toGeoJSON();\n  $('#parcelle-area').html('\nspan id=parcelle-area\n' + (LGeo.area(e.layer) / 10000).toFixed(4) + ' ha\n/span\n');\n});\nmap.on(\ndraw:edited\n, function(e) {\n  drawnItems.clearLayers();\n  e.layers.eachLayer(function(layer) {\n    drawnItems.addLayer(layer);\n    window.data = layer.toGeoJSON();\n    $('#parcelle-area').html('\nspan id=parcelle-area\n' + (LGeo.area(layer) / 10000).toFixed(4) + ' ha\n/span\n');\n  });\n\n});\n\n\n\n\nLes 2 callbacks suivants permettent de g\u00e9rer la suppression d'un dessin.\n\n\nmap.on(\ndraw:deletestop\n, function(e) {\n  window.data = {};\n  $('#parcelle-area').html('\nspan id=parcelle-area\n/span\n');\n});\nmap.on(\ndraw.started\n, function(e) {\n  map.removeLayer(drawnItems);\n});\n\n\n\n\nAvec le plugin Leaflet.Draw, nous cr\u00e9ons un dessin qui est ajout\u00e9 \u00e0 une collection de polygones. Le dessin est d\u00e9sormais comme une collections de polygones.\n\n\nwindow.featureCollection = new Object()\nwindow.featureCollection.type = 'FeatureCollection';\nwindow.featureCollection.features = new Array();\n\nmap.on(\ndraw:created\n, function(e) {\n  var layer;\n  layer = e.layer;\n  drawnItems.addLayer(layer);\n  window.featureCollection.features.push(layer.toGeoJSON());\n)}\n\n\n\n\nEnfin la fonction store permet d'enregistrer le dessin en envoyant le geojson au datastore.\n\n\nfunction store() {\n  return $.ajax(\nhttp://apicarto.coremaps.com/store/api/v2/datastore/draw\n, {\n    method: 'POST',\n    crossDomain: true,\n    contentType: 'application/x-www-form-urlencoded',\n    headers: {\n      'AUTHORIZATION': 'VOTRE CLEF D'API'\n    },\n    data: {\n      geojson: JSON.stringify(window.featureCollection)\n    }\n  }).done(function(data) {\n    console.log('R\u00e9f\u00e9rences pour r\u00e9cup\u00e9rer le fichier : ' + data.reference);\n  });\n};", 
            "title": "Enregistrement"
        }, 
        {
            "location": "/datastore/enregistrement/#datastore-enregistrement-dun-dessin", 
            "text": "", 
            "title": "Datastore - enregistrement d'un dessin"
        }, 
        {
            "location": "/datastore/enregistrement/#introduction", 
            "text": "Dans le but de faciliter l'int\u00e9gration de l'enregistrement de dessin fourni par un usager, un web service est mis en place afin de pouvoir enregistrer des g\u00e9om\u00e9tries au format GeoJson.\nCe service n\u00e9cessite une clef d'API \u00e0 demander au SGMAP.  Ce composant est sous licence AGPL v3 et disponible : https://github.com/blackrez/apicarto-datastore", 
            "title": "Introduction"
        }, 
        {
            "location": "/datastore/enregistrement/#api-version-beta", 
            "text": "URL de d\u00e9v\u00e9loppement  http://apicarto-dev.sgmap.fr/store/api/v2/datastore  Enregistrement d'une g\u00e9om\u00e9trie.  URL  : http://apicarto-dev.sgmap.fr/store/api/v2/datastore/draw  Methode  : POST  Param  : geojson  Authenfication n\u00e9cessaire  : oui  R\u00e9ponse  :   Code HTTP  :  200  JSON  :  {reference : ID}   Le param\u00e8tre geojson doit contenir un fichier GeoJson valide, il peut \u00eatre de n'importe quel type qui respecte la sp\u00e9cification. Dans les cas de g\u00e9om\u00e9tries multiples, il est recommand\u00e9 d'envoyer une collection de g\u00e9om\u00e9trie au lieu de faire fusionner les g\u00e9om\u00e9tries.\nLe champ  properties  du GeoJson permet l'utilisation de n'importe quel champ.  L'ID servira \u00e0 r\u00e9cup\u00e9rer la ou les g\u00e9om\u00e9tries.  Tout autre r\u00e9ponse doit \u00eatre consid\u00e9r\u00e9 comme une erreur et la g\u00e9om\u00e9trie n'est pas enregistr\u00e9e.   Exemple:  $ curl -X POST -H  Authorization: Token 77def68e703a6bc65c0b9e4fa426306bc1f384d9  -H  Cache-Control: no-cache  -H -H  Content-Type: application/x-www-form-urlencoded  -d 'geojson=%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B4.839992523193359%2C43.95488856092349%5D%2C%5B4.8415374755859375%2C43.950316046754146%5D%2C%5B4.821968078613281%2C43.947597087764585%5D%2C%5B4.821624755859375%2C43.95167547960693%5D%2C%5B4.839992523193359%2C43.95488856092349%5D%5D%5D%7D%7D' 'http://apicarto-dev.sgmap.fr/store/store/api/v2/datastore/draw'\n\n{ reference :  OSHPPY2G }", 
            "title": "API (version beta)"
        }, 
        {
            "location": "/datastore/enregistrement/#integration-avec-leaflet-et-jquery", 
            "text": "NB il est possible d'utiliser d'autres librairies comme OpenLayers, mais seul Leaflet est support\u00e9 officiellement  Ajout des librairies n\u00e9cessaires  Dans cet exemple, nous allons utiliser les plugins Leaflet.Draw (pour le dessin) et leaflet-geodesy (pour le calcul \u00e0 la vol\u00e9e de surface).  link rel= stylesheet  type= text/css  href= http://leaflet.github.io/Leaflet.draw/leaflet.draw.css  link rel= stylesheet  type= text/css  href= http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css \n[...] script src='https://api.tiles.mapbox.com/mapbox.js/plugins/leaflet-geodesy/v0.1.0/leaflet-geodesy.js' /script  script src= https://code.jquery.com/jquery-2.1.3.js /script  script src= http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js /script  script src= http://leaflet.github.io/Leaflet.draw/leaflet.draw.js /script   Configuration de Leaflet et de Leaflet.draw  Apr\u00e8s une configuration classique de Leaflet.Draw (un exemple complet est visible ici : https://github.com/sgmap/apicarto-client/blob/master/examples/draw/demo.js )  L'ensemble de ce premier block permet dde franciser Leaflet.Draw qui n'a pas de support multi-langues par d\u00e9faut.  L.drawLocal.draw.toolbar.buttons.polygon = 'Dessiner un polygone';\nL.drawLocal.draw.toolbar.actions.title =  Annule le dessin en cours ;\nL.drawLocal.draw.toolbar.actions.text =  Annuler ;\nL.drawLocal.draw.toolbar.undo.text =  Supprimer le dernier point ;\nL.drawLocal.draw.toolbar.undo.title =  Supprime le dernier point dessin\u00e9 ;\nL.drawLocal.draw.handlers.polygon.tooltip.start =  Cliquer pour commencer le dessin ;\nL.drawLocal.draw.handlers.polygon.tooltip.cont =  Cliquer pour continuer le dessin ;\nL.drawLocal.draw.handlers.polygon.tooltip.end =  Cliquer sur le premier point pour finaliser votre dessin ;\nL.drawLocal.edit.toolbar.actions.save.title =  Valide les modifications ;\nL.drawLocal.edit.toolbar.actions.save.text =  Valider les modifications ;\nL.drawLocal.edit.toolbar.actions.cancel.title =  Annule les modifications ;\nL.drawLocal.edit.toolbar.actions.cancel.text =  Annuler les modifications ;\nL.drawLocal.edit.handlers.edit.tooltip.text =  D\u00e9placer les points pour \u00e9diter le dessin ;\nL.drawLocal.edit.handlers.edit.tooltip.subtext =  Cliquer sur 'annuler' pour annuler les changements ;\nL.drawLocal.edit.toolbar.buttons.edit =  \u00c9dition du dessin ;\nL.drawLocal.edit.toolbar.buttons.editDisabled =  Aucun dessin \u00e0 \u00e9diter ;\nL.drawLocal.edit.toolbar.buttons.removeDisabled =  Aucun dessin \u00e0 supprimer ;\nL.drawLocal.edit.toolbar.buttons.remove =  Supprimer le dessin ;\nL.drawLocal.edit.handlers.remove.tooltip.text =  Cliquer sur le dessin pour le supprimer ;\nL.drawLocal.edit.handlers.remove.tooltip.subtext =  Cliquer sur 'annuler' pour annuler la suppression ;  Ensuite on initialise Leaflet en ajoutant les couches n\u00e9cessaires.  mapId =  map ;\nlayers = new Array;\nwindow.mapcontrol = false;\nOSM = L.tileLayer( http://{s}.tile.osm.org/{z}/{x}/{y}.png , {\n  attribution:  copy;  a href=\\ http://osm.org/copyright\\ OpenStreetMap /a \n});\nscanWmtsUrl = 'http://apicarto-dev.sgmap.fr/maps' + '/wmts?SERVICE=WMTS REQUEST=GetTile VERSION=1.0.0 LAYER=ORTHOIMAGERY.ORTHOPHOTOS STYLE=normal TILEMATRIXSET=PM TILEMATRIX={z} TILEROW={y} TILECOL={x} FORMAT=image%2Fjpeg';\northo = L.tileLayer(scanWmtsUrl, {\n  attribution:  copy;  a href=\\ http://www.ign.fr/\\ IGN /a \n});\ncadWmtsUrl = 'http://apicarto-dev.sgmap.fr/maps' + '/wmts?SERVICE=WMTS REQUEST=GetTile VERSION=1.0.0 LAYER=CADASTRALPARCELS.PARCELS STYLE=bdparcellaire_b TILEMATRIXSET=PM TILEMATRIX={z} TILEROW={y} TILECOL={x} FORMAT=image%2Fpng TRANSPARENT=TRUE';\ncad = L.tileLayer(cadWmtsUrl, {\n  attribution:  copy;  a href=\\ http://www.ign.fr/\\ IGN /a ,\n  transparent: true,\n  format: 'image/png'\n});\n\nmap = L.map(mapId, {\n  center: new L.LatLng(44.727006, -0.475243),\n  zoom: 13,\n  layers: [OSM]\n});\nwindow.map = map;\nbaseMap = {\n   IGN Orthophto : ortho,\n   OpenStreetMap : OSM\n};\noverlayMaps = {\n   Ign Cadastre : cad\n};\nL.control.layers(baseMap, overlayMaps).addTo(map);  On initialise Leaflet.draw, c'est ici qu'on configure le module de dessin.  Pour plus d'informations sur les callbacks et les options, se r\u00e9f\u00e9rer \u00e0 la documentation officielle du plugins https://github.com/Leaflet/Leaflet.draw.  drawnItems = new L.FeatureGroup();\nmap.addLayer(drawnItems);\ndrawControl = new L.Control.Draw({\n  position:  topright ,\n  draw: {\n    polygon: {\n      shapeOptions: {\n        color:  purple \n      },\n      allowIntersection: false,\n      drawError: {\n        color:  orange ,\n        timeout: 1000\n      },\n      showArea: false,\n    },\n    marker: false,\n    polyline: false,\n    rectangle: false,\n    circle: false\n  },\n  edit: {\n    featureGroup: drawnItems\n  }\n});\nmap.addControl(drawControl);\nL.control.scale({\n  imperial: false\n}).addTo(map);  On ajoute plusieurs callbacks. Le but de chaque callback est de sauvegarder l'\u00e9tat du dessin dans une variable dans le navigateur de calculer la surface du dessin.  map.on( draw:created , function(e) {\n  var layer;\n  drawnItems.clearLayers();\n  layer = e.layer;\n  drawnItems.addLayer(layer);\n  window.data = layer.toGeoJSON();\n  $('#parcelle-area').html(' span id=parcelle-area ' + (LGeo.area(e.layer) / 10000).toFixed(4) + ' ha /span ');\n});\nmap.on( draw:edited , function(e) {\n  drawnItems.clearLayers();\n  e.layers.eachLayer(function(layer) {\n    drawnItems.addLayer(layer);\n    window.data = layer.toGeoJSON();\n    $('#parcelle-area').html(' span id=parcelle-area ' + (LGeo.area(layer) / 10000).toFixed(4) + ' ha /span ');\n  });\n\n});  Les 2 callbacks suivants permettent de g\u00e9rer la suppression d'un dessin.  map.on( draw:deletestop , function(e) {\n  window.data = {};\n  $('#parcelle-area').html(' span id=parcelle-area /span ');\n});\nmap.on( draw.started , function(e) {\n  map.removeLayer(drawnItems);\n});  Avec le plugin Leaflet.Draw, nous cr\u00e9ons un dessin qui est ajout\u00e9 \u00e0 une collection de polygones. Le dessin est d\u00e9sormais comme une collections de polygones.  window.featureCollection = new Object()\nwindow.featureCollection.type = 'FeatureCollection';\nwindow.featureCollection.features = new Array();\n\nmap.on( draw:created , function(e) {\n  var layer;\n  layer = e.layer;\n  drawnItems.addLayer(layer);\n  window.featureCollection.features.push(layer.toGeoJSON());\n)}  Enfin la fonction store permet d'enregistrer le dessin en envoyant le geojson au datastore.  function store() {\n  return $.ajax( http://apicarto.coremaps.com/store/api/v2/datastore/draw , {\n    method: 'POST',\n    crossDomain: true,\n    contentType: 'application/x-www-form-urlencoded',\n    headers: {\n      'AUTHORIZATION': 'VOTRE CLEF D'API'\n    },\n    data: {\n      geojson: JSON.stringify(window.featureCollection)\n    }\n  }).done(function(data) {\n    console.log('R\u00e9f\u00e9rences pour r\u00e9cup\u00e9rer le fichier : ' + data.reference);\n  });\n};", 
            "title": "Int\u00e9gration avec leaflet et JQuery"
        }, 
        {
            "location": "/datastore/admin/", 
            "text": "", 
            "title": "Backend"
        }, 
        {
            "location": "/zonage/cadastre/", 
            "text": "Zonage - interrogation du cadastre\n\n\nIntroduction\n\n\nLe service d'interrogation du cadastre permet de faire le croisement entre un polygone et la couche vectoriel du cadastre.\nCe service ne n\u00e9cessite pas de clef d'API dans sa version beta.\n\n\nAPI (version beta)\n\n\nURL de d\u00e9v\u00e9loppement\n\n\nhttp://apicarto-dev.sgmap.fr/cadastre\n\n\nCroisement geojson couche du cadastre\n\n\nURL\n : http://apicarto-dev.sgmap.fr/cadastre\n\n\nMethode\n : POST\n\n\nParam\n : geom\n\n\nAuthenfication n\u00e9cessaire\n : non\n\n\nR\u00e9ponse\n :\n\n\n\n\nCode HTTP\n :  200\n\n\nJSON\n :\n\n\n\n\n  {\ntype\n:\nFeatureCollection\n,\nfeatures\n:\n    [{\ntype\n:\nFeature\n,\ngeometry\n:\n      {\ntype\n:\nMultiPolygon\n,\n      \ncoordinates\n:[...]},\n      \nproperties\n:{\nsurface_intersection\n:\n...\n,\n                    \nsurface_parcelle\n:...,\n                    \nnumero\n:\nXXXX\n,\n                    \nfeuille\n:X,\n                    \nsection\n:\nXX\n,\n                    \ncode_dep\n:\nXX\n,\n                    \nnom_com\n:\nX\n,\n                    \ncode_com\n:\nXXX\n,\n                    \ncode_arr\n:\nXXX\n}\n      }]\n  }\n\n\n\n\nLe param\u00e8tre geom est un geojson valide qui permettra de r\u00e9cup\u00e9rer un geojson avec les polygones des parcelles cadastrales et calcule la surface de la parcelle, et la surface de l'intersection entre la parcelle et le geojson. Les autres informations conernent les donn\u00e9es qui permettent l'identification de la parcelle.\n\n\nExemple avec Jquery\n\n\nOn consid\u00e8re qu'il y a une instance de Leaflet est active sur la page.\n\n\nLa variable data contient un objet geojson qui est transformer en Json par la fonction JSON.stringify.\n\n\nDans le callback, on affiche les parcelles concern\u00e9es sur la carte leaflet an ajoutant un layers leaflet.\n\n\n$('#testcadastre').click(function() {\n  return $.post(\nhttp://apicarto.coremaps.com/cadastre\n, {\n    contentType: \napplication/json\n,\n    dataType: 'json',\n    geom: JSON.stringify(data)\n  }).done(function(data) {\n    var layer;\n    map.removeLayer(data);\n    $('#parcelle-info').html = \n;\n    layer = L.geoJson(data, {\n      onEachFeature: onEachFeature,\n      color: \n#ff0000\n\n    }).addTo(map);\n  });\n});\nonEachFeature = function(feature, layer) {\n  $('#parcelle-info tbody:last').after('\ntr\ncommune:' + feature.properties.nom_com + '\n/tr\ntr\ntd\n'\n   + feature.properties.numero + '\n/td\ntd\n' + feature.properties.feuille + '\n/td\ntd\n' + feature.properties.section + '\n/td\ntd\n' + feature.properties.surface_intersection + '\n/td\n/tr\n');\n  layer.bindPopup('surface parcelle : ' + feature.properties.surface_parcelle + '\nbr\n');\n};", 
            "title": "Cadastre"
        }, 
        {
            "location": "/zonage/cadastre/#zonage-interrogation-du-cadastre", 
            "text": "", 
            "title": "Zonage - interrogation du cadastre"
        }, 
        {
            "location": "/zonage/cadastre/#introduction", 
            "text": "Le service d'interrogation du cadastre permet de faire le croisement entre un polygone et la couche vectoriel du cadastre.\nCe service ne n\u00e9cessite pas de clef d'API dans sa version beta.", 
            "title": "Introduction"
        }, 
        {
            "location": "/zonage/cadastre/#api-version-beta", 
            "text": "URL de d\u00e9v\u00e9loppement  http://apicarto-dev.sgmap.fr/cadastre  Croisement geojson couche du cadastre  URL  : http://apicarto-dev.sgmap.fr/cadastre  Methode  : POST  Param  : geom  Authenfication n\u00e9cessaire  : non  R\u00e9ponse  :   Code HTTP  :  200  JSON  :     { type : FeatureCollection , features :\n    [{ type : Feature , geometry :\n      { type : MultiPolygon ,\n       coordinates :[...]},\n       properties :{ surface_intersection : ... ,\n                     surface_parcelle :...,\n                     numero : XXXX ,\n                     feuille :X,\n                     section : XX ,\n                     code_dep : XX ,\n                     nom_com : X ,\n                     code_com : XXX ,\n                     code_arr : XXX }\n      }]\n  }  Le param\u00e8tre geom est un geojson valide qui permettra de r\u00e9cup\u00e9rer un geojson avec les polygones des parcelles cadastrales et calcule la surface de la parcelle, et la surface de l'intersection entre la parcelle et le geojson. Les autres informations conernent les donn\u00e9es qui permettent l'identification de la parcelle.  Exemple avec Jquery  On consid\u00e8re qu'il y a une instance de Leaflet est active sur la page.  La variable data contient un objet geojson qui est transformer en Json par la fonction JSON.stringify.  Dans le callback, on affiche les parcelles concern\u00e9es sur la carte leaflet an ajoutant un layers leaflet.  $('#testcadastre').click(function() {\n  return $.post( http://apicarto.coremaps.com/cadastre , {\n    contentType:  application/json ,\n    dataType: 'json',\n    geom: JSON.stringify(data)\n  }).done(function(data) {\n    var layer;\n    map.removeLayer(data);\n    $('#parcelle-info').html =  ;\n    layer = L.geoJson(data, {\n      onEachFeature: onEachFeature,\n      color:  #ff0000 \n    }).addTo(map);\n  });\n});\nonEachFeature = function(feature, layer) {\n  $('#parcelle-info tbody:last').after(' tr commune:' + feature.properties.nom_com + ' /tr tr td '\n   + feature.properties.numero + ' /td td ' + feature.properties.feuille + ' /td td ' + feature.properties.section + ' /td td ' + feature.properties.surface_intersection + ' /td /tr ');\n  layer.bindPopup('surface parcelle : ' + feature.properties.surface_parcelle + ' br ');\n};", 
            "title": "API (version beta)"
        }, 
        {
            "location": "/zonage/aoc/", 
            "text": "Zonage - interrogation des Zones AOC/IGP\n\n\nIntroduction\n\n\nLe service d'interrogation du cadastre permet de faire le croisement entre un polygone et la couche des AOC/IGP.\nLes donn\u00e9es proviennent de France Agrimer et de l'INAO, pour l'instant seul la Gironde est disponible.\nCe service ne n\u00e9cessite pas de clef d'API dans sa version beta.\n\n\nAPI (version beta)\n\n\nURL de d\u00e9v\u00e9loppement\n\n\nhttp://apicarto-dev.sgmap.fr/aoc/api/beta/\n\n\nCroisement geojson couche du cadastre\n\n\nURL\n : http://apicarto-dev.sgmap.fr/aoc/api/beta/in\n\n\nMethode\n : POST\n\n\nParam\n : geom\n\n\nAuthenfication n\u00e9cessaire\n : non\n\n\nR\u00e9ponse\n :\n\n\n\n\nCode HTTP\n :  200\n\n\nJSON\n :\n\n\n\n\n{\ntype\n:\nFeatureCollection\n,\n  \nfeatures\n:\n      [{\ntype\n:\nFeature\n,\n      \ngeometry\n:\n        {\ntype\n:\nMultiPolygon\n,\ncoordinates\n:[...]},\n      \nproperties\n:{\n        \narea_inter\n:xxx,\n        \nappellation\n:\nXXX\n,\nid_uni\n:\nX-XX-XXXX\n\n      }\n  ]}\n}\n\n\n\n\nLe param\u00e8tre geom est un geojson valide qui permettra de r\u00e9cup\u00e9rer un geojson avec les polygones des aires AOC/IGP et la surface de l'intersection entre la parcelle et le geojson. Le champs properties est compl\u00e9t\u00e9 par le nom de l'appelation et l'identifiant fourni par France Agrimer.\n\n\nExemple avec Jquery\n\n\nOn consid\u00e8re qu'il y a une instance de Leaflet est active sur la page.\n\n\nLa variable data contient un objet geojson qui est transformer en Json par la fonction JSON.stringify.\n\n\nDans le callback, on affiche les parcelles concern\u00e9es sur la carte leaflet an ajoutant un layers leaflet.\n\n\nonEachFeatureaoc = function(feature, layer) {\n  $('#parcelle-info tbody:last').after('\ntr\ncommune:' + feature.properties.nom_com + '\n/tr\ntr\ntd\n' + feature.properties.numero + '\n/td\ntd\n' + feature.properties.feuille + '\n/td\ntd\n' + feature.properties.section + '\n/td\ntd\n' + feature.properties.surface_intersection + '\n/td\n/tr\n');\n  layer.bindPopup('surface parcelle : ' + feature.properties.area + '\nbr\n');\n};\n\n$('#testaoc').click(function() {\n  return $.post('http://apicarto.coremaps.com/aoc/api/beta/aoc/in', {\n    contentType: \napplication/json\n,\n    dataType: 'json',\n    geom: JSON.stringify(window.data)\n  }).done(function(data) {\n    var layer;\n    $('#parcelle-aoc').html = \n;\n\n  });\n});", 
            "title": "AOC"
        }, 
        {
            "location": "/zonage/aoc/#zonage-interrogation-des-zones-aocigp", 
            "text": "", 
            "title": "Zonage - interrogation des Zones AOC/IGP"
        }, 
        {
            "location": "/zonage/aoc/#introduction", 
            "text": "Le service d'interrogation du cadastre permet de faire le croisement entre un polygone et la couche des AOC/IGP.\nLes donn\u00e9es proviennent de France Agrimer et de l'INAO, pour l'instant seul la Gironde est disponible.\nCe service ne n\u00e9cessite pas de clef d'API dans sa version beta.", 
            "title": "Introduction"
        }, 
        {
            "location": "/zonage/aoc/#api-version-beta", 
            "text": "URL de d\u00e9v\u00e9loppement  http://apicarto-dev.sgmap.fr/aoc/api/beta/  Croisement geojson couche du cadastre  URL  : http://apicarto-dev.sgmap.fr/aoc/api/beta/in  Methode  : POST  Param  : geom  Authenfication n\u00e9cessaire  : non  R\u00e9ponse  :   Code HTTP  :  200  JSON  :   { type : FeatureCollection ,\n   features :\n      [{ type : Feature ,\n       geometry :\n        { type : MultiPolygon , coordinates :[...]},\n       properties :{\n         area_inter :xxx,\n         appellation : XXX , id_uni : X-XX-XXXX \n      }\n  ]}\n}  Le param\u00e8tre geom est un geojson valide qui permettra de r\u00e9cup\u00e9rer un geojson avec les polygones des aires AOC/IGP et la surface de l'intersection entre la parcelle et le geojson. Le champs properties est compl\u00e9t\u00e9 par le nom de l'appelation et l'identifiant fourni par France Agrimer.  Exemple avec Jquery  On consid\u00e8re qu'il y a une instance de Leaflet est active sur la page.  La variable data contient un objet geojson qui est transformer en Json par la fonction JSON.stringify.  Dans le callback, on affiche les parcelles concern\u00e9es sur la carte leaflet an ajoutant un layers leaflet.  onEachFeatureaoc = function(feature, layer) {\n  $('#parcelle-info tbody:last').after(' tr commune:' + feature.properties.nom_com + ' /tr tr td ' + feature.properties.numero + ' /td td ' + feature.properties.feuille + ' /td td ' + feature.properties.section + ' /td td ' + feature.properties.surface_intersection + ' /td /tr ');\n  layer.bindPopup('surface parcelle : ' + feature.properties.area + ' br ');\n};\n\n$('#testaoc').click(function() {\n  return $.post('http://apicarto.coremaps.com/aoc/api/beta/aoc/in', {\n    contentType:  application/json ,\n    dataType: 'json',\n    geom: JSON.stringify(window.data)\n  }).done(function(data) {\n    var layer;\n    $('#parcelle-aoc').html =  ;\n\n  });\n});", 
            "title": "API (version beta)"
        }, 
        {
            "location": "/zonage/poliqueville/", 
            "text": "", 
            "title": "Politique de la ville"
        }
    ]
}